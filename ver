<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unified Profile System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        /* Navbar Styles */
        .navbar {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: white;
        }

        .nav-user {
            position: relative;
        }

        .profile-icon {
            width: 45px;
            height: 45px;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .profile-icon:hover {
            transform: scale(1.1);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .profile-letter {
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
            text-transform: uppercase;
        }

        .dropdown-toggle {
            position: absolute;
            top: 60px;
            right: 0;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            min-width: 280px;
            padding: 1.5rem;
            transform: translateY(-20px);
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .dropdown-toggle.show {
            transform: translateY(0);
            opacity: 1;
            visibility: visible;
        }

        .user-info {
            margin-bottom: 1rem;
        }

        .user-email {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .company-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }

        .wallet-address {
            font-size: 0.8rem;
            color: #888;
            font-family: 'Courier New', monospace;
            background: #f8f9fa;
            padding: 0.3rem 0.6rem;
            border-radius: 6px;
            display: inline-block;
            margin-bottom: 0.5rem;
            word-break: break-all;
        }

        .verification-status {
            font-size: 0.8rem;
            padding: 0.2rem 0.6rem;
            border-radius: 20px;
            font-weight: 500;
            display: inline-block;
        }

        .verification-status.verified {
            background: #d4edda;
            color: #155724;
        }

        .verification-status.pending {
            background: #fff3cd;
            color: #856404;
        }

        .verification-status.rejected {
            background: #f8d7da;
            color: #721c24;
        }

        .dropdown-divider {
            border: none;
            height: 1px;
            background: #eee;
            margin: 1rem 0;
        }

        .nav-link {
            display: block;
            padding: 0.8rem 0;
            color: #333;
            text-decoration: none;
            transition: all 0.3s ease;
            border-radius: 6px;
            margin: 0.2rem 0;
            cursor: pointer;
        }

        .nav-link:hover {
            background: #f8f9fa;
            color: #667eea;
            transform: translateX(5px);
        }

        /* Demo Content */
        .demo-content {
            padding: 2rem;
            color: white;
            text-align: center;
        }

        .demo-buttons {
            margin-top: 2rem;
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .demo-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .demo-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .navbar {
                padding: 1rem;
            }

            .dropdown-toggle {
                min-width: 250px;
                right: -50px;
            }

            .demo-buttons {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="logo">Your App</div>
        <div class="nav-user">
            <div class="profile-icon" onclick="toggleDropdown()">
                <span id="profile-letter" class="profile-letter">U</span>
            </div>
            <div class="dropdown-toggle" id="profile-dropdown">
                <div class="user-info">
                    <p id="user-email" class="user-email">Loading...</p>
                    <p id="company-name" class="company-name">Loading...</p>
                    <span id="wallet-address" class="wallet-address">Loading...</span>
                    <p id="verification-status" class="verification-status">Loading...</p>
                </div>
                <hr class="dropdown-divider">
                <a class="nav-link" onclick="viewProfile()">View Profile</a>
                <a class="nav-link" onclick="editProfile()">Edit Profile</a>
                <a href="#" class="nav-link" onclick="logout()">Logout</a>
            </div>
        </div>
    </nav>

    <!-- Demo Content -->
    <div class="demo-content">
        <h1>Profile System Demo</h1>
        <p>This demonstrates the unified profile system with logout functionality</p>
        
        <div class="demo-buttons">
            <button class="demo-btn" onclick="simulateManufacturer()">Load as Manufacturer</button>
            <button class="demo-btn" onclick="simulateCustomer()">Load as Customer</button>
            <button class="demo-btn" onclick="clearProfile()">Clear Profile</button>
        </div>
    </div>

    <script>
        // API Configuration
        const API_BASE = '/api';
        
        // Profile data storage
        let currentUserProfile = null;
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeProfile();
        });

        // Initialize profile system
        async function initializeProfile() {
            const token = localStorage.getItem('auth_token');
            const userRole = localStorage.getItem('user_role');
            
            if (!token || !userRole) {
                handleUnauthenticatedUser();
                return;
            }
            
            try {
                await loadUserProfile(userRole);
            } catch (error) {
                console.error('Failed to load profile:', error);
                handleProfileError();
            }
        }

        // Load user profile based on role
        async function loadUserProfile(role) {
            const endpoint = role === 'manufacturer' ? '/manufacturer/profile' : '/customer/profile';
            
            try {
                const response = await fetch(API_BASE + endpoint, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                
                if (data.status === 'success') {
                    currentUserProfile = data.user;
                    updateProfileUI(data.user);
                } else {
                    throw new Error(data.error || 'Failed to load profile');
                }
            } catch (error) {
                console.error('Profile loading error:', error);
                handleProfileError();
            }
        }

        // Update UI with profile data
        function updateProfileUI(user) {
            // Update profile letter
            const profileLetter = document.getElementById('profile-letter');
            const name = user.name || user.primary_email || 'U';
            profileLetter.textContent = name.charAt(0).toUpperCase();

            // Update user info
            document.getElementById('user-email').textContent = user.primary_email || 'No email';
            
            // Handle role-specific data
            if (user.role === 'manufacturer') {
                document.getElementById('company-name').textContent = user.current_company_name || 'No company';
                document.getElementById('wallet-address').textContent = 
                    user.primary_wallet ? formatWalletAddress(user.primary_wallet) : 'No wallet';
                
                // Update verification status
                const statusElement = document.getElementById('verification-status');
                const verificationStatus = user.verification_status || 'pending';
                statusElement.textContent = verificationStatus.charAt(0).toUpperCase() + verificationStatus.slice(1);
                statusElement.className = `verification-status ${verificationStatus}`;
            } else if (user.role === 'customer') {
                document.getElementById('company-name').textContent = user.full_name || user.name || 'Customer';
                document.getElementById('wallet-address').textContent = 
                    user.wallet_address ? formatWalletAddress(user.wallet_address) : 'No wallet';
                
                // Update customer status
                const statusElement = document.getElementById('verification-status');
                statusElement.textContent = 'Customer';
                statusElement.className = 'verification-status verified';
            }
        }

        // Format wallet address for display
        function formatWalletAddress(address) {
            if (!address) return 'No wallet';
            if (address.length > 20) {
                return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
            }
            return address;
        }

        // Toggle dropdown
        function toggleDropdown() {
            const dropdown = document.getElementById('profile-dropdown');
            dropdown.classList.toggle('show');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const profileIcon = document.querySelector('.profile-icon');
            const dropdown = document.getElementById('profile-dropdown');
            
            if (!profileIcon.contains(event.target) && !dropdown.contains(event.target)) {
                dropdown.classList.remove('show');
            }
        });

        // Profile actions
        function viewProfile() {
            alert('View Profile clicked');
            // Implement navigation to profile view
        }

        function editProfile() {
            alert('Edit Profile clicked');
            // Implement navigation to profile edit
        }

        // Enhanced logout function with complete local storage clearing
        async function logout() {
            try {
                // Optional: Call logout API endpoint
                const token = localStorage.getItem('auth_token');
                if (token) {
                    try {
                        await fetch('/api/auth/logout', {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${token}`,
                                'Content-Type': 'application/json'
                            }
                        });
                    } catch (error) {
                        console.warn('Logout API call failed:', error);
                    }
                }

                // Clear ALL localStorage items
                localStorage.clear();
                
                // Alternatively, remove specific items if you want to preserve some data:
                /*
                const itemsToRemove = [
                    'auth_token',
                    'refresh_token', 
                    'user_role',
                    'user_id',
                    'user_email',
                    'company_name',
                    'wallet_address',
                    'profile_data',
                    'session_data'
                ];
                itemsToRemove.forEach(item => localStorage.removeItem(item));
                */

                // Clear session storage as well
                sessionStorage.clear();

                // Reset current profile
                currentUserProfile = null;

                // Show logout success message
                alert('Successfully logged out!');

                // Redirect to login page
                window.location.href = '/login';

            } catch (error) {
                console.error('Logout error:', error);
                alert('Logout failed. Please try again.');
            }
        }

        // Handle unauthenticated users
        function handleUnauthenticatedUser() {
            document.getElementById('user-email').textContent = 'Not logged in';
            document.getElementById('company-name').textContent = 'Please log in';
            document.getElementById('wallet-address').textContent = '';
            document.getElementById('verification-status').textContent = '';
        }

        // Handle profile loading errors
        function handleProfileError() {
            document.getElementById('user-email').textContent = 'Error loading profile';
            document.getElementById('company-name').textContent = 'Please refresh';
            document.getElementById('wallet-address').textContent = '';
            document.getElementById('verification-status').textContent = '';
        }

        // Demo functions for testing
        function simulateManufacturer() {
            const mockManufacturer = {
                name: 'John Doe',
                role: 'manufacturer',
                primary_email: 'john@techcorp.com',
                current_company_name: 'TechCorp Industries',
                primary_wallet: '0x1234567890abcdef1234567890abcdef12345678',
                verification_status: 'verified'
            };
            updateProfileUI(mockManufacturer);
        }

        function simulateCustomer() {
            const mockCustomer = {
                name: 'Jane Smith',
                role: 'customer',
                primary_email: 'jane@email.com',
                full_name: 'Jane Smith',
                wallet_address: '0xabcdef1234567890abcdef1234567890abcdef12'
            };
            updateProfileUI(mockCustomer);
        }

        function clearProfile() {
            handleUnauthenticatedUser();
        }
    </script>
</body>
</html>